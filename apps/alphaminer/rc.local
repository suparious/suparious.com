#!/bin/bash -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

# Print the IP address
_IP=$(hostname -I) || true
if [ "$_IP" ]; then
  printf "My IP address is %s\n" "$_IP"
fi

# Launch xserver
X :0 &
sleep 10
export DISPLAY=:0

#GPU_ENABLED=(0 1 2 3 4 5)
POWER=200       # Power limit in Watts
MEM=800         # Memory offset in MHz
GPU=200         # GPU offset in MHz
FAN=80          # Fan speed in %

# Enable power management of GPUs
nvidia-smi -pm ENABLED | sed "s/^/  /gi"

# Set GPU power limits
#for gpu in ${GPU_ENABLED[@]}; do
#  nvidia-smi -i $gpu -pl $POWER
#done

# Enable GPU fan control
#for gpu in ${GPU_ENABLED[@]}; do
#  nvidia-settings -a "[gpu:$gpu]/GPUFanControlState=1"
#done

# Apply default GPU overclock

#for gpu in ${GPU_ENABLED[@]}; do
#  nvidia-settings -a "[gpu:$gpu]/GPUGraphicsClockOffset[3]=$GPU" -a "[gpu:$gpu]/GPUMemoryTransferRateOffset[3]=$MEM"
#done

# I'm too lazy to write a function for this
set +e
ALL_GPUS=$(nvidia-smi | grep GeForce | awk -F " " '{ print $2 }' | tail -n 1)
(( ++ALL_GPUS ))
while (( --ALL_GPUS >= 0 )); do
  nvidia-smi -i $ALL_GPUS -pl $POWER
  nvidia-settings -a "[gpu:$ALL_GPUS]/GPUFanControlState=1"
  nvidia-settings -a "[gpu:$ALL_GPUS]/GPUGraphicsClockOffset[3]=$GPU" -a "[gpu:$ALL_GPUS]/GPUMemoryTransferRateOffset[3]=$MEM"
done
set -e

# I'm too lazy to write a function for this
set +e
ALL_FANS=$(nvidia-settings -q fans | head -n 2 | grep "Fans" | awk -F " " '{ print $1 }')

(( ++ALL_FANS ))
while (( --ALL_FANS >= 0 )); do
  nvidia-settings -a "[fan:$ALL_FANS]/GPUTargetFanSpeed=$FAN"
done
set -e

exit 0

